#include "emulator/MPInt.h"
#include "emulator/MPCalc.h"

void tests() {
    MPIntBase num1 = MPIntBase(
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
    MPIntBase num2 = MPIntBase(
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
    auto num3 = num1 * num2;
    assert(num3 ==

    num3 -= MPIntBase(1);
    assert(num3 ==

    num3 -= MPIntBase(-1);
    assert(num3 ==


    assert(num1 / num2 == "1");
    num2 = MPIntBase(
            "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
    assert(num1 / num2 == "10");

    num2 = MPIntBase(
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");

    assert(num1 - num2 == "0");
    assert(num1 + num2 ==
           "1999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998");
    num2 = -num2;
    assert(num1 * num2 ==

    assert(num1 - num2 ==
           "1999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998");
    assert(num1 + num2 == "0");
    num1 = 4;
    num2 = 2;
    assert(num1 / num2 == "2");
    num2 = -num2;
    assert(num1 / num2 == "-2");
}

void relationalOperatorsTest() {
    auto a = MPIntBase("2147483647");
    auto b = MPIntBase("2147483648");

    assert(a < b);
}

void streamTests() {
    std::stringstream ss{std::to_string(INT_MAX)};
    MPInt<4> a{};
    ss >> a;
    assert(a == INT_MAX);
}

void factorialTest() {
    MPInt<MPINT_UNLIMITED> a(24);
    a = factorial(a);
    try {
        MPInt<4> b = a;
    } catch (OverflowException &e) {
        std::cerr << "overflow err: " << e.number << std::endl;
    }
}

void assigmentTests() {
    MPInt<5> a = INT_MAX;
    MPInt<4> b = std::string("2");
    b = a;
    assert(b == a);
}

////////////////////////////////////////////////

enum MODES {
    UNLIMITED = 1,
    INT32 = 2,
    DEMO = 3,
};


void exitWithUsage(std::string &&invalidMode) {
    std::cerr << invalidMode << " is not a valid mode, (1 - unlimited, 2 - 32bit integer, 3 - demo)." << std::endl;
    exit(EXIT_FAILURE);
}


int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr << "Invalid argument. Modes: 1 - unlimited, 2 - 32bit integer, 3 - demo\n"
                     "Usage: <executable> <mode>" << std::endl;
    }

    std::stringstream ss(argv[1]);
    size_t result;
    if (!(ss >> result))
        exitWithUsage(argv[1]);

    switch (result) {
        case UNLIMITED:
            MPCalc<MPINT_UNLIMITED> calcUnlimited{};
            calcUnlimited.startConsole();
            break;
        case INT32:
            MPCalc<4> calc32Bit{};
            calc32Bit.startConsole();
            break;
        case DEMO:
            MPCalc<MPINT_UNLIMITED> calcDemo{};
            calcDemo.startConsole();
            break;
        default:
            exitWithUsage(argv[1]);
            break;
    }
}
